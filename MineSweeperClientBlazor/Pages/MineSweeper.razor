@page "/minesweeper"
@using MineSweeperClientBlazor.Components
@using MineSweeperLogic
@inject NavigationManager _navigationManager
@inject IGame _game

<style>
    .Playing {
        visibility: hidden;
    }

    .Win {
        visibility: visible;
        position: absolute;
        top: 50%;
        left: 50%;
        margin-right: -50%;
        transform: translate(-50%, -50%);
        background-color: white;
        border: solid 1px gray;
        width: 200px;
        height: 200px;
        padding: 10px;
    }

    .Lost {
        visibility: visible;
        position: absolute;
        top: 50%;
        left: 50%;
        margin-right: -50%;
        transform: translate(-50%, -50%);
        background-color: white;
        border: solid 1px gray;
        width: 200px;
        height: 200px;
        padding: 10px;
    }

    .container.Playing {
        visibility: visible;
    }

    .container.Lost {
        opacity: 0.2;
    }

    .container.Win {
        opacity: 0.2;
    }

    .Revealed {
        width: 50px;
        height: 50px;
        background-color: white;
    }

    input.Revealed.Empty {
        font-size: 0
    }

    input.Revealed.BordersMine {
        width: 50px;
        height: 50px;
        background-color: white;
        background-image: ;
    }

    input.Hidden {
        width: 50px;
        height: 50px;
        background-color: lightgray;
        font-size: 0
    }

    .Flagged {
        width: 50px;
        height: 50px;
        border: 0px;
        font-size: 0
    }

    .Revealed.Mine {
        width: 50px;
        height: 50px;
    }

    .col.cell {
        width: 50px;
        height: 50px;
    }

    .row {
        display: inline-flex;
        width: @RowWidthInput;
    }
    .AmountOfMinesTime {
        margin-left: @AmountOfTimeMarginLeft;
        margin-bottom:30px;
    }
</style>

<div class="container text-center">
    <div class="row">
        <MineCounter AmountOfMinesLeft=@_game.Board.MineCount />
        <Timer Game=@_game />
    </div>
</div>
<div class="container text-center">
    <div class="row text-center" @oncontextmenu:preventDefault @onmousedown:preventDefault>

        @for (int i = (_game.Height - 1); i >= 0; i--)
        {
            <div class="row g-0">
                @for (int z = 0; z <= _game.Width - 1; z++)
                {
                    var identifier = new { z, i };
                    var cell = _game.Board.Cells[z, i];
                    <div class="col cell">
                        <input type="image" src="@cell.GetImageName()" id="@i, @z" value="@cell.Value"
                    class="@cell.CellState.ToString() @cell.MineState.ToString()"
                    @onmousedown="(args => btnClick(identifier.z, identifier.i, args))"
                    @oncontextmenu="(args => btnRightClick(identifier.z, identifier.i))" @oncontextmenu:preventDefault
                    @onmousedown:preventDefault />
                    </div>
                }
            </div><br>
        }
    </div>
</div>

<div class="@_game.GameState.ToString()">
    @if (_game.GameState == GameState.Lost)
    {
        <h1>You loose!</h1>
        <input type="button" @onclick="(() => Reset())" value="Reset">
    }
    @if (_game.GameState == GameState.Win)
    {
        <h1>You win!</h1>
        <input type="button" @onclick="(() => Reset())" value="Reset">
    }
</div>

<div class="container text-center">
    <div class="row">
        <MineSweeperClientBlazor.Components.Logger Logs=@_game.Logger.Logs />
        @* <logger Logs=_game.Logger.Logs /> *@
    </div>
</div>

@code {

    public string RowWidthInput { get; set; }
    public string AmountOfTimeMarginLeft { get;set;}

    public void btnClick(int z, int i, MouseEventArgs args)
    {
        Console.WriteLine($"found value z: { z } found value i : { i}");
        var value = args.Button.ToString();
        Console.WriteLine(value);
        if (args.Button == 0)
        {
            _game.LeftClicked(z, i);
            _game.WinCheck();
            this.StateHasChanged();
        }
        if (args.Button == 1)
        {
            _game.MiddleClicked(z, i);
            _game.WinCheck();
            this.StateHasChanged();
        }
        if (args.Button == 2)
        {
            _game.RightClicked(z, i);
            this.StateHasChanged();
        }
    }

    public void btnRightClick(int z, int i)
    {

    }

    public void Reset()
    {
        _game.Start();
        _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        _game.Start();
        var RowWidth = _game.Width * 50;
        RowWidthInput = $"{RowWidth.ToString()}px";
        AmountOfTimeMarginLeft = $"{(RowWidth - 242).ToString()}px !important";
    }
}
