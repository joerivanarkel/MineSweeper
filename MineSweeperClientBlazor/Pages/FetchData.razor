@page "/fetchdata"
@using MineSweeperLogic

<style>
    .Playing
    {
        visibility: hidden;
    }
    .Lost   
    {
        visibility: visible;
        position: absolute;
        top: 50%;
        left: 50%;
        margin-right: -50%;
        transform: translate(-50%, -50%);
        background-color: white;
        border: solid 1px gray;
    }
    .Lost h1
    {
        margin: 100px;
    }
    .container.Playing
    {
        visibility: visible;
    }
    .container.Lost
    {
        opacity: 0.2;
    }


    .Revealed{
        width: 50px;
        height: 50px;
        background-color: white;
        border-color: white;
    }

    input.Revealed.Empty
    {
        border: solid 1px white;
        font-size:0
    }
    input.Revealed.BordersMine {
        width: 50px;
        height: 50px;
        background-color: white;
        background-image: ;
        border: solid 1px white;
    }
    input.Hidden{
        width: 50px;
        height: 50px;
        background-color: lightgray;
        border: solid 1px gray;
        font-size:0
    }
    .Flagged{
        width: 50px;
        height: 50px;
        background-color:red;
        border: solid 1px gray;
        font-size:0
    }
    .Revealed.Mine{
        width: 50px;
        height: 50px;
        background-color:red;
    }
    .col.cell{
        width: 50px;
        height: 50px;
    }
    .row{
        display: inline-flex;
        padding:3px;
    }
</style>

<div class="container @Game.GameState.ToString() ">

    @for (int i = (Height -1); i >= 0; i--)
    {
        <div class="row">
        <style>
            .row{
                width: @RowWidthInput;
            }
        </style>
            @for (int z = 0; z < Width -1 ; z++)
            {
                var identifier = new {z, i};
                var cell = Game.Board.Cells[z, i];

                <div class="col cell">

                    <input type="button" id="@i, @z" value="@cell.Value" class="@cell.CellState.ToString() @cell.MineState.ToString()" onclick="@(() => btnClick(identifier.z, identifier.i))" oncontextmenu="@(() =>btnRightClick(identifier.z, identifier.i))" @oncontextmenu:preventDefault="true"/>
                    @* <div class="@cell.CellState.ToString() @cell.MineState.ToString()">
                        <i class="bi bi-1-circle "></i>
                    </div> *@

                </div>
            }
        </div><br>
    }
</div>

<div class="@Game.GameState.ToString()">
    <h1>You loose!</h1>
</div>


@code {
    public int Width { get; set; } = 10;
    public int Height { get; set; } = 10;
    public int MineCount { get; set; } = 5;
    public string RowWidthInput { get; set; }
    public Game Game { get; set; }

    public void btnClick(int z, int i)
    {
        Console.WriteLine( $"found value z: { z } found value i : { i}");
        Game.LeftClicked(z, i);
        this.StateHasChanged();
    }

    public void btnRightClick(int z, int i)
    {
        Game.RightClicked(z, i);
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Game = new Game(Width, Height, MineCount);
        var RowWidth = Width * 50;
        RowWidthInput = $"{RowWidth.ToString()}px";
    }
}
