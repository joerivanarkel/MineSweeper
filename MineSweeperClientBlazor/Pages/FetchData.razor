@page "/fetchdata"
@using MineSweeperClientBlazor.Components
@using MineSweeperLogic
@inject NavigationManager _navigationManager

<style>
    .Playing
    {
        visibility: hidden;
    }
    .Win   
    {
        visibility: visible;
        position: absolute;
        top: 50%;
        left: 50%;
        margin-right: -50%;
        transform: translate(-50%, -50%);
        background-color: white;
        border: solid 1px gray;
        width: 200px;
        height: 200px;
        padding: 10px;
    }
    .Lost   
    {
        visibility: visible;
        position: absolute;
        top: 50%;
        left: 50%;
        margin-right: -50%;
        transform: translate(-50%, -50%);
        background-color: white;
        border: solid 1px gray;
        width: 200px;
        height: 200px;
        padding: 10px;
    }
    .container.Playing
    {
        visibility: visible;
    }
    .container.Lost
    {
        opacity: 0.2;
    }
    .container.Win
    {
        opacity: 0.2;
    }

    .Revealed{
        width: 50px;
        height: 50px;
        background-color: white;
    }

    input.Revealed.Empty
    {
        font-size:0
    }
    input.Revealed.BordersMine {
        width: 50px;
        height: 50px;
        background-color: white;
        background-image: ;
    }
    input.Hidden{
        width: 50px;
        height: 50px;
        background-color: lightgray;
        font-size:0
    }
    .Flagged{
        width: 50px;
        height: 50px;
        border: 0px;
        font-size:0
    }
    .Revealed.Mine{
        width: 50px;
        height: 50px;
    }
    .col.cell{
        width: 50px;
        height: 50px;
    }
    .row{
        display: inline-flex; 
        padding: 0
    }
</style>
    <div class="container text-center">
        <div class="row">
            <MineCounter AmountOfMinesLeft=@Game.Board.MineCount/>
            <Timer Game=@Game/>
        </div>
    </div>

<div class="row text-center" @oncontextmenu:preventDefault @onmousedown:preventDefault>

    @for (int i = (Height -1); i >= 0; i--)
    {
        <div class="row g-0">
        <style>
            .row{
                width: @RowWidthInput;
            }
        </style> 
            @for (int z = 0; z <= Width -1 ; z++)
            {
                var identifier = new {z, i};
                var cell = Game.Board.Cells[z, i];
                <div class="col cell">
                    <input type="image" src="@cell.GetImageName()" id="@i, @z" value="@cell.Value" class="@cell.CellState.ToString() @cell.MineState.ToString()" @onmousedown="(args => btnClick(identifier.z, identifier.i, args))" @oncontextmenu="(args => btnRightClick(identifier.z, identifier.i))" @oncontextmenu:preventDefault @onmousedown:preventDefault/>
                </div>
            }
        </div><br>
    }
</div>

<div class="@Game.GameState.ToString()">
    @if (Game.GameState == GameState.Lost)
    {
        <h1>You loose!</h1>                 
        <input type="button" @onclick="(() => Reset())" value="Reset">
    }
    @if (Game.GameState == GameState.Win)
    {
        <h1>You win!</h1>
        <input type="button" @onclick="(() => Reset())" value="Reset">
    }
</div>

@code {
    public int Width { get; set; } = 50;
    public int Height { get; set; } = 20;
    public int MineCount { get; set; } = 206;
    public string RowWidthInput { get; set; }
    public Game Game { get; set; }

    public void btnClick(int z, int i, MouseEventArgs args)
    {
        Console.WriteLine( $"found value z: { z } found value i : { i}");
        var value = args.Button.ToString();
        Console.WriteLine(value);
        if (args.Button == 0)
        {
            Game.LeftClicked(z, i);
            Game.WinCheck();
            this.StateHasChanged(); 
        }
        if (args.Button == 1)
        {
            Game.MiddleClicked(z, i);
            Game.WinCheck();
            this.StateHasChanged();
        }
        if (args.Button == 2)
        {
            Game.RightClicked(z, i);
            this.StateHasChanged();
        }
    }

    public void btnRightClick(int z, int i)
    {
        
    }

    public void Reset()
    {
        _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        Game = new Game(Width, Height, MineCount);
        var RowWidth = Width * 50;
        RowWidthInput = $"{RowWidth.ToString()}px";
    }

    public string GetImageName()
    {
        return "One";
    }
}
